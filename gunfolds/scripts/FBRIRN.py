import h5py
import numpy as np
import os
from brainiak.utils import fmrisim

# from gunfolds.viz import gtool as gt
from gunfolds.utils import bfutils
import numpy as np
import pandas as pd
from gunfolds import conversions as cv
import matplotlib.pyplot as plt
from datetime import datetime
from scipy.io import loadmat
from scipy.io import savemat
import matplotlib.patches as mpatches
from gunfolds.scripts.datasets.simple_networks import simp_nets
from gunfolds.scripts import my_functions as mf
from gunfolds.solvers.clingo_rasl import drasl
from gunfolds.utils import graphkit as gk
from gunfolds.utils.calc_procs import get_process_count
import random
import tigramite.data_processing as pp
from tigramite.pcmci import PCMCI
from tigramite.independence_tests.parcorr import ParCorr
import argparse
from distutils.util import strtobool
from gunfolds.estimation import linear_model as lm
import glob
from gunfolds.viz import gtool as gt
from gunfolds.utils import zickle as zkl
import time
import sys
import networkx as nx
import scipy.sparse as sp
from scipy.sparse.linalg import eigs
import csv
from gunfolds.scripts import bold_function as hrf
sys.path.append('~/tread/py-tetrad')
from py_tetrad.tools import TetradSearch as ts

PNUM =  get_process_count(1)

file_path = '/Users/mabavisani/Desktop/fburn/FBIRN/FBIRN_ica_c30-1.mat'
f = h5py.File(file_path, "r")


ic_array = np.array(f["ic"])
print(ic_array.shape)
ic_array = ic_array.T
# Print all top-level keys (variables stored in the file)
print(list(f.keys()))
selected_rows = [2, 3, 8, 15, 16, 17, 23, 32, 33, 55, 56, 61, 62, 63, 66, 67, 70, 71, 83, 84]

# Convert to 0-based indexing
selected_rows = [i - 1 for i in selected_rows]

# Extract the specific rows
selected_ic = ic_array[selected_rows, :]

# Print shape of the new matrix
print("Shape of the new matrix:", selected_ic.shape)

dataframe = pp.DataFrame(selected_ic.T)
cond_ind_test = ParCorr()
pcmci = PCMCI(dataframe=dataframe, cond_ind_test=cond_ind_test)
# results = pcmci.run_pcmci(tau_max=1, pc_alpha=None, alpha_level=0.05)
g_estimated ={1: {1: 1,
  3: 3,
  4: 3,
  5: 3,
  6: 3,
  7: 3,
  8: 3,
  9: 3,
  10: 1,
  11: 3,
  12: 3,
  13: 1,
  14: 3,
  15: 3,
  16: 3,
  17: 3,
  18: 3,
  20: 3,
  2: 2,
  19: 2},
 2: {2: 1,
  3: 3,
  4: 1,
  5: 3,
  6: 3,
  8: 3,
  9: 3,
  11: 3,
  12: 3,
  13: 3,
  14: 3,
  17: 3,
  18: 3,
  20: 1,
  1: 2,
  7: 2,
  10: 2,
  15: 2,
  16: 2,
  19: 2},
 3: {2: 3,
  3: 1,
  4: 3,
  5: 3,
  7: 3,
  8: 3,
  9: 3,
  10: 3,
  11: 3,
  13: 3,
  14: 3,
  16: 3,
  17: 3,
  18: 3,
  19: 3,
  20: 3,
  1: 2,
  6: 2,
  15: 2},
 4: {3: 3,
  4: 1,
  5: 3,
  7: 3,
  8: 3,
  9: 3,
  10: 3,
  11: 3,
  13: 3,
  15: 3,
  16: 3,
  17: 1,
  18: 3,
  1: 2,
  6: 2,
  12: 2,
  14: 2,
  19: 2,
  20: 2},
 5: {2: 3,
  3: 3,
  5: 1,
  6: 3,
  7: 3,
  8: 3,
  9: 3,
  10: 3,
  12: 1,
  13: 3,
  14: 3,
  15: 3,
  16: 3,
  17: 3,
  18: 3,
  19: 3,
  1: 2,
  4: 2,
  11: 2,
  20: 2},
 6: {2: 3,
  3: 3,
  5: 3,
  6: 1,
  7: 3,
  8: 3,
  9: 1,
  11: 3,
  12: 3,
  13: 3,
  14: 3,
  15: 3,
  16: 3,
  17: 3,
  20: 3,
  1: 2,
  4: 2,
  18: 2,
  19: 2},
 7: {1: 3,
  2: 3,
  4: 3,
  5: 3,
  6: 3,
  7: 1,
  8: 3,
  9: 3,
  10: 3,
  11: 1,
  12: 3,
  13: 1,
  15: 3,
  16: 3,
  17: 3,
  19: 3,
  20: 3,
  3: 2,
  14: 2,
  18: 2},
 8: {1: 3,
  2: 3,
  4: 3,
  5: 3,
  6: 3,
  7: 3,
  8: 1,
  9: 3,
  10: 3,
  12: 3,
  14: 3,
  16: 1,
  17: 3,
  18: 3,
  20: 3,
  3: 2,
  11: 2,
  13: 2,
  15: 2,
  19: 2},
 9: {1: 3,
  3: 3,
  4: 3,
  5: 3,
  7: 3,
  8: 3,
  9: 1,
  10: 3,
  11: 3,
  12: 3,
  13: 3,
  14: 3,
  15: 3,
  16: 3,
  17: 3,
  18: 3,
  20: 3,
  2: 2,
  19: 2},
 10: {2: 3,
  3: 3,
  4: 3,
  5: 3,
  6: 1,
  7: 3,
  8: 3,
  9: 3,
  10: 1,
  11: 3,
  12: 3,
  13: 1,
  15: 3,
  16: 3,
  17: 3,
  19: 3,
  20: 3,
  14: 2,
  18: 2},
 11: {1: 3,
  2: 3,
  3: 3,
  4: 3,
  5: 3,
  6: 3,
  8: 3,
  9: 3,
  10: 3,
  11: 1,
  12: 3,
  14: 3,
  15: 3,
  17: 3,
  18: 3,
  19: 3,
  13: 2,
  20: 2},
 12: {3: 1,
  4: 3,
  5: 1,
  6: 3,
  8: 3,
  9: 3,
  10: 3,
  11: 3,
  12: 1,
  13: 3,
  15: 3,
  18: 3,
  19: 3,
  1: 2,
  2: 2,
  7: 2,
  14: 2,
  16: 2,
  17: 2,
  20: 2},
 13: {1: 1,
  3: 3,
  4: 3,
  6: 3,
  11: 3,
  12: 3,
  13: 1,
  14: 3,
  16: 3,
  18: 3,
  20: 3,
  2: 2,
  5: 2,
  8: 2,
  9: 2,
  15: 2,
  17: 2,
  19: 2},
 14: {5: 3,
  7: 3,
  9: 3,
  11: 3,
  12: 3,
  13: 3,
  14: 1,
  15: 3,
  16: 3,
  17: 3,
  18: 1,
  19: 1,
  1: 2,
  2: 2,
  3: 2,
  4: 2,
  6: 2,
  8: 2,
  10: 2,
  20: 2},
 15: {1: 3,
  2: 3,
  3: 3,
  5: 3,
  6: 3,
  7: 3,
  9: 3,
  12: 3,
  13: 3,
  14: 3,
  15: 1,
  16: 1,
  17: 3,
  18: 3,
  19: 3,
  20: 3,
  4: 2,
  8: 2,
  10: 2,
  11: 2},
 16: {1: 3,
  2: 3,
  3: 3,
  4: 3,
  6: 3,
  7: 3,
  9: 3,
  11: 1,
  12: 3,
  14: 3,
  15: 1,
  16: 1,
  19: 3,
  20: 3,
  5: 2,
  10: 2,
  13: 2,
  17: 2,
  18: 2},
 17: {1: 3,
  2: 3,
  3: 3,
  6: 3,
  7: 3,
  9: 3,
  10: 3,
  11: 3,
  12: 3,
  14: 3,
  15: 3,
  16: 3,
  17: 1,
  18: 3,
  19: 3,
  20: 3,
  5: 2,
  8: 2,
  13: 2},
 18: {2: 3,
  3: 3,
  5: 3,
  6: 3,
  7: 3,
  8: 3,
  9: 3,
  11: 3,
  12: 3,
  13: 3,
  14: 1,
  15: 3,
  17: 3,
  18: 1,
  19: 3,
  20: 3,
  1: 2,
  4: 2,
  10: 2,
  16: 2},
 19: {3: 3,
  4: 3,
  5: 3,
  6: 3,
  8: 3,
  9: 3,
  10: 3,
  12: 3,
  13: 3,
  14: 1,
  15: 3,
  17: 3,
  18: 3,
  19: 1,
  1: 2,
  2: 2,
  7: 2,
  11: 2,
  16: 2},
 20: {2: 1,
  3: 3,
  4: 3,
  5: 3,
  6: 3,
  7: 3,
  9: 3,
  10: 3,
  11: 3,
  12: 3,
  13: 3,
  14: 3,
  15: 3,
  16: 3,
  17: 3,
  18: 3,
  20: 1,
  1: 2,
  8: 2}}

members = [{1,2,15},{7,8,18},{6,9,20},{17,10,14},{5,4,3,13},{19,12},{16,11}]
MAXCOST = 10000
# DD = (np.abs((np.abs(A / np.abs(A).max()) + (cv.graph2adj(g_estimated) - 1)) * MAXCOST)).astype(int)
# BD = (np.abs((np.abs(B / np.abs(B).max()) + (cv.graph2badj(g_estimated) - 1)) * MAXCOST)).astype(int)

r_estimated = drasl([g_estimated], weighted=True, capsize=0, timeout=0,
                    urate=3,
                    # dm=[DD],
                    # bdm=[BD],
                    scc=True,
                    scc_members=members,
                    GT_density=75,
                    edge_weights=[2,2,2,2,1], pnum=PNUM, optim='optN', selfloop=False)

print('number of optimal solutions is', len(r_estimated))
max_f1_score = 0